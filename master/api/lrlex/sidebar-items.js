initSidebarItems({"enum":[["LexErrorKind","The various different possible Lex parser errors."],["LexerKind",""]],"fn":[["build_lex",""]],"macro":[["lrlex_mod","A convenience macro for including statically compiled `.l` files. A file `src/a/b/c.l` which is statically compiled by lrlex can then be used in a crate with `lrlex_mod!(\"a/b/c.l\")`."]],"struct":[["LRNonStreamingLexer","An `LRNonStreamingLexer` holds a reference to a string and can lex it into [lrpar::Lexeme]s. Although the struct is tied to a single string, no guarantees are made about whether the lexemes are cached or not."],["LRNonStreamingLexerDef","This struct represents, in essence, a .l file in memory. From it one can produce an [LRNonStreamingLexer] which actually lexes inputs."],["LexBuildError","Any error from the Lex parser returns an instance of this struct."],["LexerBuilder","A `LexerBuilder` allows one to specify the criteria for building a statically generated lexer."]],"trait":[["LexerDef","Methods which all lexer definitions must implement."]],"type":[["LexBuildResult",""],["NonStreamingLexerDef",""]]});